# this workflow maintained at https://codeberg.org/r-codeberg/woodpecker-ci
# please file bug reports and feature requests to help it improve!

matrix:
  IMAGE: 
    - rocker/verse

when:
  - branch: "${CI_REPO_DEFAULT_BRANCH}"
    event: push
  - event: pull_request
  - event: tag

variables:
  site_config: &site_config
    - export WOODPECKER_TMP=/woodpecker/tmp

  r_envvars: &r_envvars
    R_NCPU: 1
    _R_CHECK_FORCE_SUGGESTS_: "false"
    _R_CHECK_CRAN_INCOMING_: "false"

    # CRAN OMP thread limit (https://stackoverflow.com/a/77323812)
    # Resolves issue with R CMD check for CPU time exceeding elapsed time
    OMP_THREAD_LIMIT: 2,
    
  r_site_config: &r_site_config
    # These environment variables used to help find appropriate binaries in PPM
    - cat /etc/os-release >> "$(R RHOME)/etc/Renviron.site"

    # Store our temporary directory, accessible across workflow steps
    - echo "WOODPECKER_TMP=/woodpecker/tmp" >> "$(R RHOME)/etc/Renviron.site"

    # Configure R profile to use during ci
    # - sets options used throughout workflow
    # - configures a package library that will be re-used by each step
    - |
      cat << END >> $(R RHOME)/etc/Rprofile.site
      options(
        Ncpus = Sys.getenv("R_NCPU", unset = getOption("Ncpus", 1L)),
        repos = c(
          "p3m.dev" = sprintf(
            "https://p3m.dev/cran/__linux__/%s/latest",
            if (nchar(envvar <- Sys.getenv("VERSION_CODENAME"))) envvar
          ),
          CRAN = "https://cloud.r-project.org"
        ),
        pak.sysreqs = TRUE,

        # these settings used to provide prettier ci log output
        cli.dynamic = FALSE,
        cli.default_num_colors = 256,
        crayon.enabled = TRUE
      )

      local({
        tmp <- Sys.getenv("WOODPECKER_TMP")
        if (!dir.exists(tmp)) dir.create(tmp, recursive = TRUE)
        lib <- file.path("", "woodpecker", "lib")
        if (!dir.exists(lib)) dir.create(lib, recursive = TRUE)
        .libPaths(c(lib, .libPaths()))
      })

      END

steps:
  - name: setup
    image: ${IMAGE}
    pull: true
    environment:
      <<: *r_envvars
    commands:
      - <<: *r_site_config
      - |
        R -q -s --no-save << "END"
        pak_repo <- sprintf(
          "https://r-lib.github.io/p/pak/stable/%s/%s/%s",
          .Platform$pkgType,
          R.Version()$os,
          R.Version()$arch
        )

        install.packages("pak", repos = pak_repo)
        pak::local_install_dev_deps()
        END

  - name: check
    image: ${IMAGE}
    depends_on: [setup]
    pull: true
    environment:
      <<: *r_envvars
    commands:
      - <<: *r_site_config
      - |
        R -q -s --no-save << "END"
        pak::local_install_dev_deps()
        pak::pkg_install("rcmdcheck")
        rcmdcheck::rcmdcheck(
          args = c("--no-manual", "--as-cran", "--no-tests", "--timings"),
          build_args = c("--no-manual"),
          error_on = "warning",
          check_dir = "check"
        )
        END

  - name: test
    image: ${IMAGE}
    depends_on: [setup]
    pull: true
    environment:
      <<: *r_envvars
    commands:
      - <<: *r_site_config
      - |
        R -q -s --no-save << "END"
        pak::local_install_dev_deps()
        pak::pkg_install(c("covr", "xml2"))

        woodpecker_tmp <- normalizePath(Sys.getenv("WOODPECKER_TMP"), winslash = "/")
        woodpecker_package <- file.path(woodpecker_tmp, "package")

        cov <- covr::package_coverage(
          quiet = FALSE,
          clean = FALSE,
          install_path = woodpecker_package
        )

        woodpecker_cobertura_xml <- file.path(woodpecker_tmp, "cobertura.xml")
        covr::to_cobertura(cov, filename = woodpecker_cobertura_xml)
        END
      - |
        echo '─ test results ────────────────────────────────────────────────────────────────'
        find '/woodpecker/tmp/package' -name 'testthat.Rout*' -exec cat '{}' \; || true

  - name: pkgdown
    image: ${IMAGE}
    depends_on: [setup]
    environment:
      <<: *r_envvars
    commands:
      - <<: *r_site_config
      - |
        R -q -s --no-save << "END"
        pak::local_install_dev_deps()
        pak::pkg_install(".")
        pak::pkg_install("pkgdown")
        woodpecker_tmp <- normalizePath(Sys.getenv("WOODPECKER_TMP"), winslash = "/")
        woodpecker_pages <- file.path(woodpecker_tmp, "pages")
        pkg <- pkgdown::as_pkgdown(".", override = list(destination = woodpecker_pages))
        pkgdown::build_site(pkg, new_process = FALSE, install = FALSE)
        END

  - name: deploy
    image: alpine/git
    depends_on: [pkgdown]
    when:
      - branch: "${CI_REPO_DEFAULT_BRANCH}"
        event: push
    environment:
      <<: *r_envvars
      DEPLOY_SSH_KEY:
        # expects woodpecker ci ssh access
        #   - generated with `ssh-keygen -t ed25519 -f /tmp/key`
        #   - private key: store as woodpecker ci secret `deploy_ssh_key`,
        #     optionally set only accessible in `alpine/git` image
        #   - public key: provide as a Deploy Key in codeberg repository
        #     settings, granting write access to repository
        from_secret: deploy_ssh_key
    commands:
      - <<: *site_config

      # check that ssh key is provided as a secret
      - |
        if [ -z "$${DEPLOY_SSH_KEY}" ]; then
        echo '
        Whoops! It looks like you have yet to configure your SSH secrets.

        Woodpecker CI needs to be able to push to your repo in order to deploy
        Codeberg pages. To do this, we will generate an SSH key pair, storing
        the private key as a Woodpecker secret and the public key as a deploy
        key in Codeberg.

        Steps:
        1. Generate an SSH key pair (see resources below for commands)
        2. Store the private key on https://ci.codeberg.org/user/secrets with
           the name `deploy_ssh_key`.
        3. Store the public key in your repository settings under "Deploy Keys"

        Resources:
        * Generating an SSH key pair
          https://docs.codeberg.org/security/ssh-key/#generating-an-ssh-key-pair
        * Configuring woodpecker secrets
          https://woodpecker-ci.org/docs/usage/secrets
        * Configuring codeberg Deploy Keys
        '
        exit 1;
        fi;

      # copy author details of last commit
      - export GIT_USER_NAME=$$(git log -1 --pretty=format:'%an')
      - export GIT_USER_EMAIL=$$(git log -1 --pretty=format:'%ae')

      # set up ssh key, apply known hosts
      - eval $(ssh-agent -s)
      - echo "$${DEPLOY_SSH_KEY}" | ssh-add -
      - mkdir -p ~/.ssh
      - ssh-keyscan -H codeberg.org >> ~/.ssh/known_hosts

      # clone repo, create new branch, copy in pages
      - git clone --depth 1 $${CI_REPO_CLONE_SSH_URL} $${WOODPECKER_TMP}/deploy
      - cd $${WOODPECKER_TMP}/deploy
      - git switch --orphan pages
      - git pull origin pages || echo "pages branch not found, creating ..."
      - git rm --cached --ignore-unmatch -r .
      - cp -r $${WOODPECKER_TMP}/pages/* .

      # commit new pages contents & deploy
      - git add -A
      - git config --global user.name $${GIT_USER_NAME}
      - git config --global user.email $${GIT_USER_EMAIL}
      - git commit -m "deploy to pages from $${CI_COMMIT_BRANCH} @ $${CI_COMMIT_SHA:0:8}"
      - git push origin pages
