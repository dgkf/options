% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/define_option.R
\name{defining_options}
\alias{defining_options}
\alias{define_option}
\alias{define_options}
\title{Defining Options}
\usage{
define_option(option, ...)

define_options(...)
}
\arguments{
\item{option}{An option name to use}

\item{...}{Additional arguments passed to \code{\link[=option_spec]{option_spec()}}}
}
\value{
the package options environment
}
\description{
Define options which can be used throughout your package.
}
\details{
At their simplest, defining options lets you refer to a global option using a
shorthand option name throughout your package, with the added benefit of
looking for configurations in global options and environment variables.
}
\section{Functions}{
\itemize{
\item \code{define_option()}: Define an option. Unlike \code{\link[=define_options]{define_options()}}, this function allows detailed
customization of all option behaviors. Accepts either an \code{\link[=option_spec]{option_spec()}}
object, or an option named followed by arguments to provide to
\code{\link[=option_spec]{option_spec()}}.

\item \code{define_options()}: Define multiple options. This function provides a shorthand syntax for
succinctly defining many options, using default behaviors. It expects
pairs of arguments, one unnamed argument with a description of each option
followed by a named argument providing the name and default value.

}}
\examples{
define_options(
  "Whether execution should emit console output",
  quiet = FALSE,

  "Whether to use detailed console output",
  verbose = FALSE
)

define_option(
  "deprecations",
  desc = "Whether deprecation warnings should be suppressed automatically",
  default = FALSE,
  option_name = "MypackageDeprecations",
  envvar_name = "MYPACKAGE_ENVVARS_DEPRECATIONS"
)

}
