[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 options authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/envvars.html","id":"customizing-names","dir":"Articles","previous_headings":"","what":"Customizing names","title":"Environment Variables","text":"Perhaps default environment names don’t suit . defining options, can always use ! However, level customization available define_option() interface. default environment variables look like R_<PACKAGE>_<OPTION> can now alter behavior using environment variable, VOL. ’s better!","code":"library(options) define_option(   \"volume\",   default = \"shout\",   desc = \"Print output in uppercase ('shout') or lowercase ('whisper')\",   option_name = \"volume\",   envvar_name = \"VOL\" ) #>  #> volume = \"shout\" #>  #>   Print output in uppercase ('shout') or lowercase ('whisper') #>  #>   option  : volume #>   envvar  : VOL (evaluated if possible, raw string otherwise) #>  *default : \"shout\"  twist_and <- function(what = opt(\"volume\")) {   lyric <- paste(     \"Well, shake it up, baby, now (Shake it up, baby)\",     \"Twist and shout (Twist and shout)\",     sep = \"\\n\"   )    cat(if (what == \"shout\") toupper(lyric) else tolower(lyric), \"\\n\") } twist_and()  # by default, \"shout\" #> WELL, SHAKE IT UP, BABY, NOW (SHAKE IT UP, BABY) #> TWIST AND SHOUT (TWIST AND SHOUT) Sys.setenv(VOL = \"whisper\")  twist_and()  # picks up our environment variable, \"whisper\" #> well, shake it up, baby, now (shake it up, baby) #> twist and shout (twist and shout)"},{"path":"/articles/envvars.html","id":"setting-naming-rules","dir":"Articles","previous_headings":"","what":"Setting Naming Rules","title":"Environment Variables","text":"Although individually mapping options environment variables handy one-options, can tedious throughout package, especially want variables follow consistent naming scheme. can provide function used name future options’ environment variables. Now future option environment variables use convention defined. Existing options unaffected redefined, ’s often best make sure code runs start defining options. ’ll notice redefined option now uses custom naming scheme environment variable. can always write function, choose pre-built ones ?naming_formats.","code":"set_envvar_name_fn(function(package, name) {   gsub(\"[^A-Z0-9]\", \"_\", toupper(paste0(package, \"_\", name))) }) define_options(   \"Print output in uppercase ('shout') or lowercase ('whisper')\",   volume = \"shout\" ) #>  #> volume = \"shout\" #>  #>   Print output in uppercase ('shout') or lowercase ('whisper') #>  #>   option  : globalenv.volume #>   envvar  : GLOBALENV_VOLUME (evaluated if possible, raw string otherwise) #>  *default : \"shout\""},{"path":"/articles/envvars.html","id":"parsing-values","dir":"Articles","previous_headings":"","what":"Parsing Values","title":"Environment Variables","text":"far ’ve just using environment variable’s value -. Environment variable values, default, try parsed R objects. fails, ’ll deliver raw string value. can nice default behavior, handling many simple cases expected ’ll notice typo last example completely changed type data read . Depending way intend use variable, perhaps default error-prone necessary. help , whole family functions allow customize way environment variables internalized option values (?envvar_fns). Generally, ’s best keep specific data type option intend use - example, using envvar_is_true always coerce value logical scalar. Just like , used specify option’s behaviors: course can define function however like.","code":"[[1]] [1] 1  [[2]] [1] \"a\" define_option(   \"volume\",   default = TRUE,   desc = \"Print output in uppercase (TRUE) or lowercase (FALSE)\",   envvar_fn = envvar_is_true() ) #>  #> volume = TRUE #>  #>   Print output in uppercase (TRUE) or lowercase (FALSE) #>  #>   option  : globalenv.volume #>   envvar  : GLOBALENV_VOLUME (TRUE if one of 'TRUE', '1', FALSE otherwise) #>  *default : TRUE"},{"path":"/articles/envvars.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Environment Variables","text":"Let’s put together. ’ll customize environment variable name, provide custom envvar_fn handles interpret raw environment variable value. Note ?envvar_fns family functions, like envvar_choice_of() return functions. Although powerful mechanism customizing behaviors, can look odd first glance. first generate function giving values choose (envvar_choice_of(1:11)), use function raw value (choice_of_nums(raw)). Now need update twist_and function work newly consistent numeric volumes. Let’s try ! Looks pretty good! handle just inputs want, without worry unexpected data slipping R code.","code":"define_option(   \"volume\",   default = 1,   desc = paste0(     \"Print output in uppercase (shout) or lowercase (whisper), or any \",     \"number from 1-10 for random uppercasing\"   ),   envvar_name = \"VOL\",   envvar_fn = function(raw, ...) {     choice_of_nums <- envvar_choice_of(1:11)     switch(raw, shout = 10, whisper = 1, choice_of_nums(raw))   } ) #>  #> volume = 1 #>  #>   Print output in uppercase (shout) or lowercase (whisper), or any #>   number from 1-10 for random uppercasing #>  #>   option  : globalenv.volume #>   envvar  : VOL #>  *default : 1 twist_and_shout <- function(vol = opt(\"volume\")) {   lyric <- c(     \"Well, shake it up, baby, now (Shake it up, baby)\",     \"Twist and shout (Twist and shout)\"   )    # handle case where volume knob is broken   if (is.null(vol)) stop(\"someone turned off the stereo\")    # randomly uppercase characters to match volume   lyric <- strsplit(tolower(lyric), \"\")   lyric <- lapply(lyric, function(line) {     char_sample <- runif(nchar(line)) < (vol - 1) / 9     line[char_sample] <- toupper(line[char_sample])     paste0(line, collapse = \"\")   })    # in case someone turns it up to 11   if (vol == 11) lyric <- gsub(\"(\\\\s*\\\\(|\\\\))\", \"!!!\\\\1\", lyric)    cat(paste(lyric, collapse = \"\\n\"), \"\\n\") } Sys.setenv(VOL = \"whisper\") twist_and_shout() #> well, shake it up, baby, now (shake it up, baby) #> twist and shout (twist and shout) Sys.setenv(VOL = 5) twist_and_shout() #> wEll, ShAkE it UP, BABY, now (shake It UP, BaBy) #> TwIsT aND shOUt (tWiST anD shOuT) Sys.setenv(VOL = \"shout\") twist_and_shout() #> WELL, SHAKE IT UP, BABY, NOW (SHAKE IT UP, BABY) #> TWIST AND SHOUT (TWIST AND SHOUT) Sys.setenv(VOL = 11) twist_and_shout() #> WELL, SHAKE IT UP, BABY, NOW!!! (SHAKE IT UP, BABY!!!) #> TWIST AND SHOUT!!! (TWIST AND SHOUT!!!) Sys.setenv(VOL = \"off\")  # parsed as NULL twist_and_shout() #> Error in twist_and_shout(): someone turned off the stereo"},{"path":"/articles/options.html","id":"defining-options","dir":"Articles","previous_headings":"","what":"Defining Options","title":"options","text":"writing package, start defining options package might use. Define options using define_options() shorthand. Interlace descriptions default values define multiple options . want control, can use define_option() declare aspects option behaves.","code":"options::define_options(   \"This is an example of how a package author would document their internally   used options. This option could make the package default to executing   quietly.\",   quiet = TRUE,    \"Multiple options can be defined, providing default values if a global option   or environment variable isn't set.\",   second_example = FALSE,    \"Default values are lazily evaluated, so you are free to use package functions   without worrying about build-time evaluation order\",   lazy_example = fn_not_defined_until_later() ) options::define_option(   option = \"concrete_example\",   default = TRUE,   desc = paste0(     \"Or, if you prefer a more concrete constructor you can define each option \",     \"explicitly.\"   ),   option_name = \"mypackage_concrete\", # define custom option names   envvar_name = \"MYPACKAGE_CONCRETE\", # and custom environment variable names   envvar_fn = envvar_is_true()        # and use helpers to handle envvar parsing )"},{"path":"/articles/options.html","id":"documentation","dir":"Articles","previous_headings":"","what":"Documentation","title":"options","text":"long options created shown , documenting options easy adding small roxygen stub within package. produces ?mypackage::options help page. Moreover, options page show index using ?options search documentation, making easier discover packages options use. options used default values parameters, can use option documentation populate function parameter docs. made simple parameters share names options. situations identically named parameters don’t want inherit option documentation, can provide names as_params use just subset options. can also reassign documentation option parameter different name.","code":"#' @eval options::as_roxygen_docs() NULL mypackage Options  Description:       Internally used, package-specific options. All options will      prioritize R options() values, and fall back to environment      variables if undefined. If neither the option nor the environment      variable is set, a default value is used.  Options:       quiet           This is an example of how a package author would document their           internally used options. This option could make the package default to           executing quietly.            default:                TRUE            option: mypackage.quiet            envvar: R_MYPACKAGE_QUIET (raw) ... #' @eval options::as_params() #' @name options_params #' NULL  #' Count to Three #' #' @inheritParams option_params #' count_to_three <- function(quiet = opt(\"quiet\")) {   for (i in 1:3) if (!quiet) cat(i, \"\\n\") } #' Hello World! #' #' @eval options::as_params(\"silent\" = \"quiet\") #' hello <- function(who, silent = opt(\"quiet\")) {   cat(paste0(\"Hello, \", who, \"!\"), \"\\n\") }"},{"path":"/articles/options.html","id":"customizing-behaviors","dir":"Articles","previous_headings":"","what":"Customizing Behaviors","title":"options","text":"using define_option can set option_name envvar_name used directly. can tedious typo-prone write every option. Instead, might consider providing function sets default format option environment variable names. , can use set_option_name_fn set_envvar_name_fn, accept function argument. function accepts two arguments, package name internal option name, uses produce return corresponding global option name environment variable name.","code":"options::set_option_name_fn(function(package, name) {   tolower(paste0(package, \".\", name)) })  options::set_envvar_name_fn(function(package, name) {   gsub(\"[^A-Z0-9]\", \"_\", toupper(paste0(package, \"_\", name))) })"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Doug Kelkhoff. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kelkhoff D (2023). options: Simple, Consistent Package Options. https://dgkf.github.io/options/, https://github.com/dgkf/options.","code":"@Manual{,   title = {options: Simple, Consistent Package Options},   author = {Doug Kelkhoff},   year = {2023},   note = {https://dgkf.github.io/options/, https://github.com/dgkf/options}, }"},{"path":"/index.html","id":"options-","dir":"","previous_headings":"","what":"Simple, Consistent Package Options","title":"Simple, Consistent Package Options","text":"Simple, Consistent Package Options ’ve exposed options package , ’ve inevitably re-written one pieces trivial boilerplate code: Prefixing option names sort package namespace Building option documentation Preferentially using default value, global options environment variables Parsing environment variables useful R data options aims make things easy, without copy around boilerplate code.","code":""},{"path":[]},{"path":"/index.html","id":"defining-options","dir":"","previous_headings":"Quick Start","what":"Defining Options","title":"Simple, Consistent Package Options","text":"Define options using define_options shorthand. Interlace descriptions default values define multiple options . want control, can use define_option declare aspects option behaves.","code":"#' @import options options::define_options(   \"This is an example of how a package author would document their internally   used options. This option could make the package default to executing   quietly.\",   quiet = TRUE,    \"Multiple options can be defined, providing default values if a global option   or environment variable isn't set.\",   second_example = FALSE,    \"Default values are lazily evaluated, so you are free to use package functions   without worrying about build-time evaluation order\",   lazy_example = fn_not_defined_until_later() ) options::define_option(   option = \"concrete_example\",   default = TRUE,   desc = paste0(     \"Or, if you prefer a more concrete constructor you can define each option \",     \"explicitly.\"   ),   option_name = \"mypackage_concrete\", # define custom option names   envvar_name = \"MYPACKAGE_CONCRETE\", # and custom environment variable names   envvar_fn = envvar_is_true()        # and use helpers to handle envvar parsing )"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"Quick Start","what":"Documentation","title":"Simple, Consistent Package Options","text":"long options created shown , documenting options easy adding small roxygen stub within package. Produces ?mypackage::options options used default values parameters, can use option documentation populate function parameter docs. made simple parameters share names options. situations identically named parameters don’t want inherit option documentation, can provide names as_params use just subset options. can also reassign documentation option parameter different name.","code":"#' @eval options::as_roxygen_docs() NULL mypackage Options  Description:       Internally used, package-specific options. All options will      prioritize R options() values, and fall back to environment      variables if undefined. If neither the option nor the environment      variable is set, a default value is used.  Options:       quiet           This is an example of how a package author would document their           internally used options. This option could make the package default to           executing quietly.            default:                TRUE            option: mypackage.quiet            envvar: R_MYPACKAGE_QUIET (raw) ... #' @eval options::as_params() #' @name options_params #' NULL  #' Count to Three #' #' @inheritParams option_params #' count_to_three <- function(quiet = opt(\"quiet\")) {   for (i in 1:3) if (!quiet) cat(i, \"\\n\") } #' Hello World! #' #' @eval options::as_params(\"silent\" = \"quiet\") #' hello <- function(who, silent = opt(\"quiet\")) {   cat(paste0(\"Hello, \", who, \"!\"), \"\\n\") }"},{"path":"/index.html","id":"customizing-behaviors","dir":"","previous_headings":"Quick Start","what":"Customizing Behaviors","title":"Simple, Consistent Package Options","text":"using define_option can set option_name envvar_name used directly. can tedious typo-prone write every option. Instead, might consider providing function sets default format option environment variable names. , can use set_option_name_fn set_envvar_name_fn, accept function argument. function accepts two arguments, package name internal option name, uses produce return corresponding global option name environment variable name.","code":"options::set_option_name_fn(function(package, name) {   tolower(paste0(package, \".\", name)) })  options::set_envvar_name_fn(function(package, name) {   gsub(\"[^A-Z0-9]\", \"_\", toupper(paste0(package, \"_\", name))) })"},{"path":"/reference/as_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce @param roxygen sections for options — as_params","title":"Produce @param roxygen sections for options — as_params","text":"Generate parameter documentation based option behaviors. Especially useful ubiquitous function parameters default option values.","code":""},{"path":"/reference/as_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce @param roxygen sections for options — as_params","text":"","code":"as_params(...)"},{"path":"/reference/as_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce @param roxygen sections for options — as_params","text":"... Character values options use. named arguments provided, option description provided value mapped parameter argument's name.","code":""},{"path":"/reference/as_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce @param roxygen sections for options — as_params","text":"character vector roxygen2  @param tags","code":""},{"path":[]},{"path":"/reference/as_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce @param roxygen sections for options — as_params","text":"","code":"options::define_options(   \"whether messages should be written softly, or in all-caps\",   quiet = TRUE ) #>  #> quiet = TRUE #>  #>   whether messages should be written softly, or in all-caps #>  #>   option  : globalenv.quiet #>   envvar  : R_GLOBALENV_QUIET (evaluated if possible, raw string otherwise) #>  *default : TRUE #>   #' Hello, World #' #' @eval options::as_params(\"softly\" = \"quiet\") #' hello <- function(who, softly = opt(\"quiet\")) {   say_what <- paste0(\"Hello, \", who, \"!\")   if (quiet) say_what else toupper(say_what) }"},{"path":"/reference/as_roxygen_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Standalone ?options Documentation — as_roxygen_docs","title":"Generate Standalone ?options Documentation — as_roxygen_docs","text":"Produce comprehensive documentation page outlining defined options' behaviors.","code":""},{"path":"/reference/as_roxygen_docs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Standalone ?options Documentation — as_roxygen_docs","text":"","code":"as_roxygen_docs(   title = paste(pkgname(env), \"Options\"),   desc = default_options_rd_desc(),   env = parent.frame() )"},{"path":"/reference/as_roxygen_docs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Standalone ?options Documentation — as_roxygen_docs","text":"title optional, customized title (defaults \"Options\") desc optional, customized description behaviors env environemnt find associated options object","code":""},{"path":"/reference/as_roxygen_docs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Standalone ?options Documentation — as_roxygen_docs","text":"character vector roxygen2 tag segments","code":""},{"path":[]},{"path":"/reference/as_roxygen_docs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Standalone ?options Documentation — as_roxygen_docs","text":"","code":"#' @eval options::as_roxygen_docs() NULL #> NULL"},{"path":"/reference/assert_naming_fn_signature.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert signature for naming functions — assert_naming_fn_signature","title":"Assert signature for naming functions — assert_naming_fn_signature","text":"Assert signature naming functions","code":""},{"path":"/reference/assert_naming_fn_signature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert signature for naming functions — assert_naming_fn_signature","text":"","code":"assert_naming_fn_signature(fn)"},{"path":"/reference/assert_naming_fn_signature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert signature for naming functions — assert_naming_fn_signature","text":"fn function inspect","code":""},{"path":"/reference/defining_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Defining Options — defining_options","title":"Defining Options — defining_options","text":"Define options can used throughout package.","code":""},{"path":"/reference/defining_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defining Options — defining_options","text":"","code":"define_option(option, ...)  define_options(...)"},{"path":"/reference/defining_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defining Options — defining_options","text":"option option name use ... Additional arguments passed option_spec()","code":""},{"path":"/reference/defining_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defining Options — defining_options","text":"package options environment","code":""},{"path":"/reference/defining_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Defining Options — defining_options","text":"simplest, defining options lets refer global option using shorthand option name throughout package, added benefit looking configurations global options environment variables.","code":""},{"path":"/reference/defining_options.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Defining Options — defining_options","text":"define_option(): Define option. Unlike define_options(), function allows detailed customization option behaviors. Accepts either option_spec() object, option named followed arguments provide option_spec(). define_options(): Define multiple options. function provides shorthand syntax succinctly defining many options. Arguments defined groups, starting unnamed description argument. details see Section Non-Standard Evaluation.","code":""},{"path":"/reference/defining_options.html","id":"non-standard-evaluation","dir":"Reference","previous_headings":"","what":"Non-Standard Evaluation","title":"Defining Options — defining_options","text":"define_options() accepts arguments non-standard way, groups arguments used specify option (See options_spec()). Groups arguments must start unnamed argument, provides description argument, followed immediately named argument providing name option default value, followed additional arguments provie options_spec(). environment options defined always assumed parent environment. prefer specify options different environment, best done using define_option() (<env>, define_options(...)). Although define_options() provides functionality define_option() succinct shorthand, recommended cases overwhelming majority options leverage default behaviors. encouraged use define_option() repeatedly need involved definitions minimize non-standard evaluation bugs.","code":""},{"path":"/reference/defining_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defining Options — defining_options","text":"","code":"define_options(   \"Whether execution should emit console output\",   quiet = FALSE,    \"Whether to use detailed console output (showcasing additional   configuration parameters)\",   verbose = TRUE,   envvar_fn = envvar_is_true() ) #>  #> quiet = FALSE #>  #>   Whether execution should emit console output #>  #>   option  : globalenv.quiet #>   envvar  : R_GLOBALENV_QUIET (evaluated if possible, raw string otherwise) #>  *default : FALSE #>  #> verbose = TRUE #>  #>   Whether to use detailed console output (showcasing additional #>   configuration parameters) #>  #>   option  : globalenv.verbose #>   envvar  : R_GLOBALENV_VERBOSE (TRUE if one of 'TRUE', '1', FALSE otherwise) #>  *default : TRUE #>   define_option(   \"deprecations\",   desc = \"Whether deprecation warnings should be suppressed automatically\",   default = FALSE,   option_name = \"MypackageDeprecations\",   envvar_name = \"MYPACKAGE_ENVVARS_DEPRECATIONS\" ) #>  #> quiet = FALSE #>  #>   Whether execution should emit console output #>  #>   option  : globalenv.quiet #>   envvar  : R_GLOBALENV_QUIET (evaluated if possible, raw string otherwise) #>  *default : FALSE #>  #> verbose = TRUE #>  #>   Whether to use detailed console output (showcasing additional #>   configuration parameters) #>  #>   option  : globalenv.verbose #>   envvar  : R_GLOBALENV_VERBOSE (TRUE if one of 'TRUE', '1', FALSE otherwise) #>  *default : TRUE #>  #> deprecations = FALSE #>  #>   Whether deprecation warnings should be suppressed automatically #>  #>   option  : MypackageDeprecations #>   envvar  : MYPACKAGE_ENVVARS_DEPRECATIONS (evaluated if possible, raw string otherwise) #>  *default : FALSE #>"},{"path":"/reference/envvar_fns.html","id":null,"dir":"Reference","previous_headings":"","what":"Generator functions for environment variable processors — envvar_fns","title":"Generator functions for environment variable processors — envvar_fns","text":"functions return environment variable processor functions. Arguments used specify behaviors.","code":""},{"path":"/reference/envvar_fns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generator functions for environment variable processors — envvar_fns","text":"","code":"envvar_is(value, ...)  # S3 method for `NULL` envvar_is(value, case_sensitive = FALSE, ...)  # S3 method for character envvar_is(value, case_sensitive = FALSE, ...)  # S3 method for numeric envvar_is(value, ...)  # S3 method for logical envvar_is(value, case_sensitive = FALSE, ...)  envvar_eval(...)  envvar_eval_or_raw(...)  envvar_is_one_of(values, ...)  envvar_choice_of(values, default = NULL, ...)  envvar_is_true(...)  envvar_is_false(...)  envvar_is_set(...)  envvar_str_split(delim = \";\", ...)"},{"path":"/reference/envvar_fns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generator functions for environment variable processors — envvar_fns","text":"value value test ... arguments unused case_sensitive logical value indicating whether string comparisons case-sensitive. values list vector values match default default value used value coerced environment variable value delim character value use delimiter use splitting environment variable value","code":""},{"path":"/reference/envvar_fns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generator functions for environment variable processors — envvar_fns","text":"function used processing environment variable value","code":""},{"path":"/reference/envvar_fns.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generator functions for environment variable processors — envvar_fns","text":"envvar_is(): Test equality handlers atomic R types, performing sensible interpretation environment variable values. envvar_is(`NULL`): environment variable value \"null\" envvar_is(character): environment variable equal string value envvar_is(numeric): environment variable equal string representation numeric value envvar_is(logical): environment variable equal string representation logical value envvar_eval(): Parse environment variable value R code evaluate produce return value, emitting error expression fails parse evaluate. option sensible default R-specific environment variables, may fail string literals, meaningful values conform R's syntax like \"true\" (see envvar_is_true()), \"false\" (see envvar_is_false()) \"null\". envvar_eval_or_raw(): Parse environment variable value R code evaluate produce return value, falling back raw value string error occurs. envvar_is_one_of(): meaningful string comparisons, check whether environment variable equal meaningful string. Optionally case-sensitivity. envvar_choice_of(): Check whether environment variable can coerced match one values, returning value matches default otherwise. envvar_is_true(): Test whether environment variable \"truthy\", whether case-insensitive \"true\" 1 envvar_is_false(): Test whether environment variable \"falsy\", whether case-insensitive \"false\" 0 envvar_is_set(): Test whether environment variable set. somewhat operating-system dependent, operating systems can distinguish empty string value unset environment variable. details see Sys.getenv()'s Details unset parameter. envvar_str_split(): Interpret environment variable delimited list strings, PATH variables.","code":""},{"path":"/reference/err.html","id":null,"dir":"Reference","previous_headings":"","what":"Raise a package error — err","title":"Raise a package error — err","text":"Raise package error","code":""},{"path":"/reference/err.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raise a package error — err","text":"","code":"err(title, issues = list(), which = 0)"},{"path":"/reference/err.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raise a package error — err","text":"title title error issues optionally named list issues associate error. named, issues first sorted issue name. relative frame use build associated call","code":""},{"path":"/reference/err.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raise a package error — err","text":"options_error class","code":""},{"path":"/reference/format.option_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Format an option specification — format.option_spec","title":"Format an option specification — format.option_spec","text":"Format option specification","code":""},{"path":"/reference/format.option_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format an option specification — format.option_spec","text":"","code":"# S3 method for option_spec format(x, value, ..., fmt = options_fmts())"},{"path":"/reference/format.option_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format an option specification — format.option_spec","text":"x option specification (\"option_spec\") class object value Optionally, current value display option specified ... Additional arguments unused fmt list formats use formatting individual text elements","code":""},{"path":"/reference/format.option_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format an option specification — format.option_spec","text":"formatted character value","code":""},{"path":"/reference/format.options_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Format an options environment — format.options_env","title":"Format an options environment — format.options_env","text":"Format options environment","code":""},{"path":"/reference/format.options_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format an options environment — format.options_env","text":"","code":"# S3 method for options_env format(x, ..., fmt = options_fmts())"},{"path":"/reference/format.options_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format an options environment — format.options_env","text":"x option environment (\"option_env\") class object ... Additional arguments unused fmt list formats use formatting individual text elements","code":""},{"path":"/reference/format.options_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format an options environment — format.options_env","text":"formatted character value","code":""},{"path":"/reference/format.options_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Format an options list — format.options_list","title":"Format an options list — format.options_list","text":"Format options list","code":""},{"path":"/reference/format.options_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format an options list — format.options_list","text":"","code":"# S3 method for options_list format(x, ..., fmt = options_fmts())"},{"path":"/reference/format.options_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format an options list — format.options_list","text":"x option list (\"option_list\") class object ... Additional arguments unused fmt list formats use formatting individual text elements","code":""},{"path":"/reference/format.options_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format an options list — format.options_list","text":"formatted character value","code":""},{"path":"/reference/format_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a possible option source — format_field","title":"Format a possible option source — format_field","text":"Format possible option source","code":""},{"path":"/reference/format_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a possible option source — format_field","text":"","code":"format_field(field, active, value, fmt = options_fmts())"},{"path":"/reference/format_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a possible option source — format_field","text":"field field option source active Whether source source option's value value value source used fmt list formats use formatting individual text elements","code":""},{"path":"/reference/format_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a possible option source — format_field","text":"formatted character value","code":""},{"path":"/reference/format_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Format value shorthands for command line display — format_value","title":"Format value shorthands for command line display — format_value","text":"Format value shorthands command line display","code":""},{"path":"/reference/format_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format value shorthands for command line display — format_value","text":"","code":"format_value(x, ..., fmt = NULL)  # S3 method for S3 format_value(x, .., fmt = options_fmts())  # S3 method for S4 format_value(x, .., fmt = options_fmts())  # S3 method for `function` format_value(x, ..., fmt = options_fmts())  # S3 method for environment format_value(x, ..., fmt = options_fmts())  # S3 method for expression format_value(x, ..., fmt = options_fmts())  # S3 method for quote format_value(x, ..., fmt = options_fmts())  # S3 method for call format_value(x, ..., fmt = options_fmts())  # S3 method for name format_value(x, ..., fmt = options_fmts())  # S3 method for symbol format_value(x, ..., fmt = options_fmts())"},{"path":"/reference/format_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format value shorthands for command line display — format_value","text":"x R object display, attempting show actual value, falling back shorthands complex data types. ... Additional arguments unused fmt list formats use formatting individual text elements","code":""},{"path":"/reference/format_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format value shorthands for command line display — format_value","text":"formatted character value","code":""},{"path":"/reference/naming.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Naming Conventions — naming","title":"Define Naming Conventions — naming","text":"Option naming conventions use sensible defaults can get started quickly minimal configuration.","code":""},{"path":"/reference/naming.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Naming Conventions — naming","text":"","code":"set_envvar_name_fn(fn, env = parent.frame())  set_option_name_fn(fn, env = parent.frame())"},{"path":"/reference/naming.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Naming Conventions — naming","text":"fn callback function expects two arguments, package name option name, returns single character value use environment variable name. env environment search options settings","code":""},{"path":"/reference/naming.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Naming Conventions — naming","text":"callback function fn","code":""},{"path":"/reference/naming.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Define Naming Conventions — naming","text":"set_envvar_name_fn(): Set callback function use format environment variable names. set_option_name_fn(): Set callback function use format option names.","code":""},{"path":"/reference/naming.html","id":"defaults","dir":"Reference","previous_headings":"","what":"Defaults","title":"Define Naming Conventions — naming","text":"Given package mypackage option myoption, default settings generate options environment variables using convention: option:   environment variable:   convention intended track closely options environment variables handled frequently wild. Perhaps contrast community conventions, R_ prefix tacked default environment variables. prefix helps differentiate environment variables similarly named tools exist outside R ecosystem.","code":"mypackage.myoption R_MYPACKAGE_MYOPTION"},{"path":"/reference/naming.html","id":"setting-alternative-conventions","dir":"Reference","previous_headings":"","what":"Setting Alternative Conventions","title":"Define Naming Conventions — naming","text":"choose use alternative naming conventions, must set callback function defining options. best achieved altering settings file define options. choose break options across multiple files, best define collate order R scripts ensure options consistently configured across operating systems.","code":""},{"path":[]},{"path":"/reference/naming.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Naming Conventions — naming","text":"","code":"set_envvar_name_fn(envvar_name_generic)  set_envvar_name_fn(function(package, name) {   toupper(paste(\"ENV\", package, name, sep = \"_\")) })"},{"path":"/reference/naming_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Naming Convention Formatters — naming_formats","title":"Naming Convention Formatters — naming_formats","text":"family functions used internally generate global option environment variable names package name internal option name.","code":""},{"path":"/reference/naming_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Naming Convention Formatters — naming_formats","text":"","code":"option_name_default(package, option)  # \"package.option\"  envvar_name_default(package, option)  # \"R_PACKAGE_OPTION\"  envvar_name_generic(package, option)  # \"PACKAGE_OPTION\""},{"path":"/reference/naming_formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Naming Convention Formatters — naming_formats","text":"package, option package name internal option name used generating global R option environment variable name. functions often provided values, arguments rarely need provided package authors directly.","code":""},{"path":"/reference/naming_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Naming Convention Formatters — naming_formats","text":"character value use global option name environment variable name","code":""},{"path":"/reference/naming_formats.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Naming Convention Formatters — naming_formats","text":"option_name_default(): default naming convention, producing global R option name package name internal option name (mypackage.myoption) envvar_name_default(): default naming convention, producing environment variable name package name internal option name (R_MYPACKAGE_MYOPTION) envvar_name_generic(): generic naming convention, producing environment variable name package name internal option name. Useful generic convention might used share environment variables tools name, confident R package conflict tools. (MYPACKAGE_MYOPTION)","code":""},{"path":[]},{"path":"/reference/opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspecting Option Values — opt","title":"Inspecting Option Values — opt","text":"Inspecting Option Values","code":""},{"path":"/reference/opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspecting Option Values — opt","text":"","code":"opt(x, default, env = parent.frame())  opt_source(x, env = parent.frame())  opts(xs = NULL, env = parent.frame())"},{"path":"/reference/opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspecting Option Values — opt","text":"x, xs option name vector option names default default value option set env environment, namespace package name pull options ","code":""},{"path":"/reference/opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspecting Option Values — opt","text":"opt() opts(); result option (list results), either value global option, result processing environment variable default value, depending alternative sources defined. opt_source(); source used specific option, one \"option\", \"envir\" \"default\".","code":""},{"path":"/reference/opt.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Inspecting Option Values — opt","text":"opt(): Retrieve option opt_source(): Determine source option value. Primarily used diagnosing options behaviors. opts(): Retrieve multiple options. names provided, return list containing options given environment.","code":""},{"path":"/reference/opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspecting Option Values — opt","text":"","code":"define_options(\"Whether execution should emit console output\", quiet = FALSE) #>  #> quiet = FALSE #>  #>   Whether execution should emit console output #>  #>   option  : globalenv.quiet #>   envvar  : R_GLOBALENV_QUIET (evaluated if possible, raw string otherwise) #>  *default : FALSE #>  opt(\"quiet\") #> [1] FALSE  define_options(\"Whether execution should emit console output\", quiet = FALSE) #>  #> quiet = FALSE #>  #>   Whether execution should emit console output #>  #>   option  : globalenv.quiet #>   envvar  : R_GLOBALENV_QUIET (evaluated if possible, raw string otherwise) #>  *default : FALSE #>  opt_source(\"quiet\") #> [1] \"default\"  Sys.setenv(R_GLOBALENV_QUIET = TRUE) opt_source(\"quiet\") #> [1] \"envir\"  options(globalenv.quiet = FALSE) opt_source(\"quiet\") #> [1] \"option\""},{"path":"/reference/option_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify Option — option_spec","title":"Specify Option — option_spec","text":"option specification outlines various behaviors option. default value, related global R option, related environment variable name, well description. information defines operating behavior option.","code":""},{"path":"/reference/option_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify Option — option_spec","text":"","code":"option_spec(   name,   default = bquote(),   desc = NULL,   option_name = get_option_name_fn(envir),   envvar_name = get_envvar_name_fn(envir),   envvar_fn = envvar_eval_or_raw(),   quoted = FALSE,   eager = FALSE,   envir = parent.frame() )"},{"path":"/reference/option_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify Option — option_spec","text":"name string representing internal name option. short form <option> used within namespace relates , example, <package>.<option> global R option. default Either quoted expression (parameter quote == TRUE) default value option.  Defaults empty expression, indicating unset. default value lazily evaluated, evaluated option first requested unless parameter eager == TRUE. desc written description option's effects option_name, envvar_name character value function. character value provided used corresponding global option name environment variable name. function provided provided package name internal option name derive global option name. example, provided package \"mypkg\" option \"myoption\", function might return global option name \"mypkg.myoption\" environment variable name \"R_MYPKG_MYOPTION\". Defaults configured default functions fall back option_name_default envvar_name_default, can configured using set_option_name_fn set_envvar_name_fn. envvar_fn function use parsing environment variable values. Defaults envvar_eval_or_raw(). quoted logical value indicating whether default argument treated quoted expression value. eager logical value indicating whether default argument eagerly evaluated (upon call), lazily evaluated (upon first use). distinction affect default values rely evaluation expression, may produce different result depending context evaluated. envir environment search options envir object. rarely necessary use anything default.","code":""},{"path":"/reference/option_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify Option — option_spec","text":"option_spec object, simple S3 class wrapping list containing arguments.","code":""},{"path":"/reference/options_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Options Environment Class — options_env","title":"Options Environment Class — options_env","text":"options environment stores primarily, default values options. addition, stores metadata pertaining option form attributes.","code":""},{"path":"/reference/options_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Options Environment Class — options_env","text":"","code":"get_options_env(env, ...)  options_initialized(env, inherits = FALSE)  init_options_env(env = parent.frame())  as_options_list(x, ...)  get_option_default_value(x, env = parent.frame())  get_options_spec(env = parent.frame())  get_option_spec(name, env = parent.frame())  set_option_spec(name, details, env = parent.frame())"},{"path":"/reference/options_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Options Environment Class — options_env","text":"env environment search options environment ... Additional arguments unused inherits Whether search upward parent environments","code":""},{"path":"/reference/options_env.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Options Environment Class — options_env","text":"get_options_env(): Initialize (needed) retrieve environment containing options options_initialized(): Test whether options initialized environment init_options_env(): Initialize options object as_options_list(): Convert options list get_option_default_value(): Get option's default value get_options_spec(): Get options specifications named list get_option_spec(): Get single option specification set_option_spec(): Set single option specification","code":""},{"path":"/reference/options_env.html","id":"attributes","dir":"Reference","previous_headings":"","what":"Attributes","title":"Options Environment Class — options_env","text":"spec: named list option specifications option_name_fn: function used derive default option names newly defined options. See set_option_name_fn(). envvar_name_fn: function used derive default environment variable names newly defined options. See set_envvar_name_fn().","code":""},{"path":"/reference/options_fmts.html","id":null,"dir":"Reference","previous_headings":"","what":"Optional Crayon Handling — options_fmts","title":"Optional Crayon Handling — options_fmts","text":"Generate list styling functions using crayon, safely falling back non-crayon output crayon unavailable.","code":""},{"path":"/reference/options_fmts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optional Crayon Handling — options_fmts","text":"","code":"options_fmts()"},{"path":"/reference/options_fmts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optional Crayon Handling — options_fmts","text":"x text format","code":""},{"path":"/reference/options_fmts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optional Crayon Handling — options_fmts","text":"formatted text","code":""},{"path":"/reference/pkgname.html","id":null,"dir":"Reference","previous_headings":"","what":"Grab package name, at runtime — pkgname","title":"Grab package name, at runtime — pkgname","text":"Lazily grab packageName() within calling environment, within function environment.","code":""},{"path":"/reference/pkgname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grab package name, at runtime — pkgname","text":"","code":"pkgname(env = parent.frame())"},{"path":"/reference/pkgname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grab package name, at runtime — pkgname","text":"env environment search package name","code":""},{"path":"/reference/pkgname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grab package name, at runtime — pkgname","text":"package name \"globalenv\" found","code":""},{"path":"/reference/reflow_option_desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Reflow multiline strings — reflow_option_desc","title":"Reflow multiline strings — reflow_option_desc","text":"small helper function allowing multiline strings collapsed continuous lines, similar markdown's paragraph handling.","code":""},{"path":"/reference/reflow_option_desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reflow multiline strings — reflow_option_desc","text":"","code":"reflow_option_desc(x)"},{"path":"/reference/reflow_option_desc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reflow multiline strings — reflow_option_desc","text":"x vector multiline strings reflow","code":""},{"path":"/reference/reflow_option_desc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reflow multiline strings — reflow_option_desc","text":"reflowed strings","code":""},{"path":"/news/index.html","id":"options-002","dir":"Changelog","previous_headings":"","what":"options 0.0.2","title":"options 0.0.2","text":"opts() slightly refactored produce constructive output option names provided. can now use opts(env = package_name) fetch full named list option values. (@dgkf #2) Generated roxygen2 documentation using as_roxygen_docs() now consciencious R CMD check requirements, moving \\usage{} new section titled “Checking Option Values”. (@dgkf #2)","code":""},{"path":"/news/index.html","id":"options-001","dir":"Changelog","previous_headings":"","what":"options 0.0.1","title":"options 0.0.1","text":"CRAN release: 2023-01-09 options split dgkf/devutils","code":""}]
